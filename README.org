* clj-journal

Structured logging to systemd journal using native systemd libraries and JNA
(Java Native Access).

Includes a log appender for timbre.

** Features

+ automatically converts hash-maps to journal fields
+ includes timbre output function that removes redundancy in log lines

** Installation

#+BEGIN_SRC clojure
  [runejuhl/clj-journal "0.2.5-1"]
#+END_SRC

** Usage

#+BEGIN_SRC clojure
  (require '[clj-journal.log :refer [jprint jsend]])
  (jprint :error "Oh noes, an error!")
  (jsend :emerg
    "Even worse, we got ourselves an emergency!"
    :some-informational-value 9000)

  (def debug (jprint :debug))
  (debug "This is a bit too verbose to be :info")
#+END_SRC

*** Log level conversion

You can override =clj-journal.util/level->syslog= if you want to use another way
of converting a keyword/string reprentation of the log level to an integer:

#+BEGIN_SRC clojure
  (binding [clj-journal.util/level->syslog (fn [_] 1)]
    ;; prints as ALERT instead of DEBUG
    (jprint :debug "hello there"))
#+END_SRC

*** Logging with Timbre

#+BEGIN_SRC clojure
  (timbre/merge-config!
    {:appenders {:journal-appender (clj-journal.timbre/journal-appender)}})

  (timbre/info "something happened!" {:asd   12
                                      :leet  1337
                                      :weird {:blegh "lollo"}})
#+END_SRC

** Bugs/issues

*** Logging ~%n~

Previous to version ~v0.2.5-1~ the JVM would crash if trying to log a string
containing ~%n~. For some reason this would also happen if the ~n~ was a
newline, e.g. logging the string ~omg %\n~.

In order to combat this we've introduced the dynamic variable
~clj-journal.log/*strict*~, which defaults to ~false~. When the value is non-nil
~clj-journal~ will throw an exception if it encounters ~%n~; otherwise it'll
silently replace ~%n~ with ~%_n~.

It is, of course, less than optimal for a logging framework to silently change
the log messages, so /caveat emptor/. Oh, and help wanted!
